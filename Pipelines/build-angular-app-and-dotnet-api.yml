parameters:
- name: artifactName
- name: dbContextNames
  type: object
  default: []
- name: displayName
  default: Build Angular App and .net API
- name: nodeVersion
  default: '16.13.2'
- name: projectNameAngularApp
- name: projectNameSecondAngularApp
  default: ''
- name: projectNamePrefix
- name: runAngularTests
  default: false
- name: preBuildSteps
  type: object
  default: []
- name: postBuildSteps
  type: object
  default: []

jobs: 
- job: 'Build_Angular_and_dotNet'
  displayName: ${{ parameters.displayName }}
  dependsOn: build_prerequisites
  pool: 'enigmatry-hosted-windows-agents-test'
  variables:
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
    NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

  steps:
  - task: NodeTool@0
    displayName: 'Set Node version'
    inputs:
      versionSource: 'spec'
      versionSpec: ${{ parameters.nodeVersion }}

  - ${{ parameters.preBuildSteps }}

  - template: build-angular-app-job.yml
    parameters:
      projectNameAngularApp: ${{ parameters.projectNameAngularApp }}
      runAngularTests: ${{ parameters.runAngularTests }}
  
  - ${{ if ne(parameters.projectNameSecondAngularApp, '') }}:
    - template: build-angular-app-job.yml
      parameters:
        projectNameAngularApp: ${{ parameters.projectNameSecondAngularApp }}
        appName: ${{ parameters.projectNameSecondAngularApp }}
        runAngularTests: ${{ parameters.runAngularTests }}
  
  - task: NuGetToolInstaller@1
    displayName: Install NuGet Tool

  - task: Cache@2
    displayName: 'NuGet Cache'
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
      restoreKeys: |
          nuget | "$(Agent.OS)"
          nuget
      path: $(NUGET_PACKAGES)
      cacheHitVar: 'NUGET_CACHE_RESTORED'

  - task: NuGetCommand@2
    displayName: Nuget Restore
    inputs:
      restoreSolution: '${{ parameters.projectNamePrefix }}.sln'

  - task: VSBuild@1
    displayName: Build package
    inputs:
      solution: '${{ parameters.projectNamePrefix }}.sln'
      msbuildArgs: '/p:DeployOnBuild=true;WebPublishMethod=Package;PackageAsSingleFile=true;SkipInvalidConfigurations=true;PackageLocation=$(Build.ArtifactStagingDirectory);Version=$(Build.BuildNumber);TreatWarningsAsErrors=true;WarningsNotAsErrors=CS0612;EnforceCodeStyleInBuild=true'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: Run Unit Tests
    inputs:
      command: 'test'
      projects: ${{ parameters.projectNamePrefix }}**/*.Tests.csproj
      arguments: '--filter TestCategory=unit|TestCategory=smoke --configuration $(buildConfiguration) --no-build'
  
  - task: PublishBuildArtifacts@1
    displayName: Publish Build artifacts
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: ${{ parameters.artifactName }}-$(Build.BuildNumber)
      publishLocation: 'Container'

  - ${{ if ne(length(parameters.dbContextNames), 0) }}:
    - task: DotNetCoreCLI@2
      displayName: New Manifest for EF tool
      inputs:
        command: custom
        custom: new
        arguments: tool-manifest

    - task: DotNetCoreCLI@2
      displayName: Install EF Tool
      inputs:
        command: custom
        custom: tool
        arguments: install dotnet-ef --version 8.0.2

    - ${{ each contextName in parameters.dbContextNames }} :
      - task: DotNetCoreCLI@2
        displayName: 'Generate migration script for context: ${{ contextName }}'
        inputs:
          command: custom
          custom: ef
          arguments: 'migrations bundle --output migrations\${{ contextName }}-efbundle.exe --context ${{ contextName }} --startup-project ${{ parameters.projectNamePrefix }}.Data.Migrations --project ${{ parameters.projectNamePrefix }}.Data.Migrations --configuration $(buildConfiguration) --self-contained'
    
    - task: PublishBuildArtifacts@1
      displayName: Publish migrations
      inputs:
        PathtoPublish: Migrations
        ArtifactName: ${{ parameters.artifactName }}-migrations-$(Build.BuildNumber)
        publishLocation: 'Container'

    - task: CmdLine@2
      displayName: Reset local changes
      inputs:
        script: 'git reset --hard'
  # end if
  
  - ${{ parameters.postBuildSteps }}
