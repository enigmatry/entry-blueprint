trigger:
- master

variables:
  artifactName: 'enigmatry-entry-blueprint-template'
  buildConfiguration: 'Release'
  nodeVersion: '16.20.2'
  projectNameAngularApp: enigmatry-entry-blueprint-app
  projectNamePrefix: Enigmatry.Entry.Blueprint

pool: 'enigmatry-managed-devops-test'

stages:
- stage: 'ci_build'
  displayName: 'Build the web application'
  jobs: 
  - job: build_prerequisites
    displayName: Get the version for the build
    steps:
    - checkout: self
      fetchDepth: 0
    - task: DotNetCoreCLI@2
      displayName: Add Manifest for tool installation
      inputs:
        command: 'custom'
        custom: 'new '
        arguments: tool-manifest
    - task: DotNetCoreCLI@2
      displayName: Install minver
      inputs:
        command: 'custom'
        custom: 'tool '
        arguments: install minver-cli
    - task: PowerShell@2
      displayName: 'Set MinVer Version'
      inputs:
        targetType: inline
        script: |
          $version = dotnet minver -p preview
          echo "##vso[build.updatebuildnumber]$version"
          Write-Host "Setting MinVer to '$version'"
  
  - job: 'Build_Package'
    displayName: Build Package
    dependsOn: build_prerequisites
    steps:
    - task: DotNetCoreCLI@2
      displayName: Pack the NuGet packages
      inputs:
        command: 'pack'
        packagesToPack: '**/Enigmatry.Entry.Blueprint.Template.csproj'
        configuration: '$(buildConfiguration)'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'BUILD_BUILDNUMBER'
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: $(artifactName)-$(Build.BuildNumber)
        publishLocation: 'Container'

- stage: publish_nuget
  displayName: publish packages to NuGet
  dependsOn: ci_build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
  jobs:
  - deployment: Publish
    environment: nuget
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'nuget_org'
