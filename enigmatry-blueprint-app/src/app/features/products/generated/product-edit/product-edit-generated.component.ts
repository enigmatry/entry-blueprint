// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------;
/* eslint-disable */
import { Component, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { IGetProductDetailsResponse } from 'src/app/api/api-reference';
import { IFieldExpressionDictionary, SelectConfiguration } from '@enigmatry/angular-building-blocks/form';
import { BehaviorSubject } from 'rxjs';


@Component({
  selector: 'app-g-product-edit',
  templateUrl: './product-edit-generated.component.html',
  styleUrls: ['./product-edit-generated.component.scss']
})
export class ProductEditGeneratedComponent implements OnInit {

  @Input() model: IGetProductDetailsResponse = {} as IGetProductDetailsResponse;
  @Input() set isReadonly(value: boolean) {
    this._isReadonly = value;
    this.fields = this.initializeFields();
  }
  get isReadonly() {
    return this._isReadonly;
  }

  @Input() saveButtonText: string = 'Save';
  @Input() cancelButtonText: string = 'Cancel';
  @Input() formButtonsTemplate: TemplateRef<any> | null | undefined;

  @Input() fieldsHideExpressions: IFieldExpressionDictionary<IGetProductDetailsResponse> | undefined = undefined;
  @Input() fieldsDisableExpressions: IFieldExpressionDictionary<IGetProductDetailsResponse> | undefined = undefined;

  @Output() save = new EventEmitter<IGetProductDetailsResponse>();
  @Output() cancel = new EventEmitter<void>();

            @Input() typeOptions: any[] = [{ value: 0, displayName: 'Food' }, { value: 1, displayName: 'Drink' }, { value: 2, displayName: 'Book' }, { value: 3, displayName: 'Car' }];
            @Input() typeOptionsConfiguration: SelectConfiguration = { valueProperty: 'value', labelProperty: 'displayName' };

 _isReadonly: boolean;
  form = new FormGroup({});
  fields: FormlyFieldConfig[] = [];

  constructor() { }

  ngOnInit(): void {
    this.fields = this.initializeFields();
  }

  onSubmit() {
    if (this.form.valid) {
      this.save.emit(this.model);
    }
  }

  initializeFields(): FormlyFieldConfig[] {
    return [
            { key: 'id' },
        {
        key: 'name',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.name ?? false,
        expressionProperties: {
          'templateOptions.disabled': this.fieldsDisableExpressions?.name ?? (() => false),
        },
        wrappers: ['form-field', 'tooltip'],
        templateOptions: {
        label: 'Name',
        placeholder: 'Unique product name',
        disabled: this.isReadonly || false,
        description: '',
        appearance: 'outline',
        hidden: !true,
        tooltipText: 'Tooltip text for name form control',
            required: true,
minLength: 5,
maxLength: 50,

        },
modelOptions: { updateOn: 'blur' },
asyncValidators: { validation: [ 'productNameIsUnique' ] },
        },
        {
        key: 'code',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.code ?? false,
        expressionProperties: {
          'templateOptions.disabled': this.fieldsDisableExpressions?.code ?? (() => false),
        },
        templateOptions: {
        label: 'Code',
        placeholder: 'Unique product code identifier',
        disabled: this.isReadonly || false,
        description: '',
        hidden: !true,
            required: true,
pattern: /^[A-Z]{4}[1-9]{8}$/mu,

        },
            validation: {
            messages: {
pattern: 'Code must be in 4 letter 8 digits format (e.g. ABCD12345678)'
            }
            },
modelOptions: { updateOn: 'blur' },
asyncValidators: { validation: [ 'productCodeIsUnique' ] },
        },
        {
        key: 'type',
        type: 'select',
        className: '',
        hideExpression: this.fieldsHideExpressions?.type ?? false,
        expressionProperties: {
          'templateOptions.disabled': this.fieldsDisableExpressions?.type ?? (() => false),
        },
        templateOptions: {
        label: 'Type',
        placeholder: 'Type',
        disabled: this.isReadonly || false,
        description: '',
            options: this.typeOptions,
            valueProp: this.typeOptionsConfiguration.valueProperty,
            labelProp: this.typeOptionsConfiguration.labelProperty,
        hidden: !true,
            required: true,

        },
        },
        {
        key: 'price',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.price ?? false,
        expressionProperties: {
          'templateOptions.disabled': this.fieldsDisableExpressions?.price ?? (() => false),
        },
        templateOptions: {
        label: 'Price per unit',
        placeholder: 'Price per unit',
        disabled: this.isReadonly || false,
        description: '',
        hidden: !true,
            required: true,
type: 'number',
min: 0.99 + 0.1,
max: 999.99,

        },
        },
        {
        key: 'amount',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.amount ?? false,
        expressionProperties: {
          'templateOptions.disabled': this.fieldsDisableExpressions?.amount ?? (() => false),
        },
        templateOptions: {
        label: 'Units',
        placeholder: 'Units',
        disabled: this.isReadonly || false,
        description: '',
        hidden: !true,
            required: true,
type: 'number',
min: 0 + 1,
max: 100,

        },
        },
        {
        key: 'contactEmail',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.contactEmail ?? false,
        expressionProperties: {
          'templateOptions.disabled': this.fieldsDisableExpressions?.contactEmail ?? (() => false),
        },
        wrappers: ['form-field', 'tooltip'],
        templateOptions: {
        label: 'Contact email',
        placeholder: 'Contact person email address',
        disabled: this.isReadonly || false,
        description: '',
        hidden: !true,
        tooltipText: 'Tooltip text for email form control',
            required: true,
pattern: /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,

        },
            validation: {
            messages: {
pattern: 'Invalid email address format'
            }
            },
        },
        {
        key: 'contactPhone',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.contactPhone ?? false,
        expressionProperties: {
          'templateOptions.disabled': this.fieldsDisableExpressions?.contactPhone ?? (() => false),
        },
        templateOptions: {
        label: 'Contact phone',
        placeholder: 'Contact person phone number',
        disabled: this.isReadonly || false,
        description: '',
        hidden: !true,
            required: true,
pattern: /^s*(?:\+?(\d{1,3}))?[-. (]*(\d{3})[-. )]*(\d{3})[-. ]*(\d{4})(?: *x(\d+))?\s*$/mu,

        },
        },
        {
        key: 'infoLink',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.infoLink ?? false,
        expressionProperties: {
          'templateOptions.disabled': this.fieldsDisableExpressions?.infoLink ?? (() => false),
        },
        templateOptions: {
        label: 'Homepage',
        placeholder: 'Link to product homepage',
        disabled: this.isReadonly || false,
        description: '',
        hidden: !true,
            pattern: /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/u,

        },
        },
        {
        key: 'expiresOn',
        type: 'datepicker',
        className: '',
        hideExpression: this.fieldsHideExpressions?.expiresOn ?? false,
        expressionProperties: {
          'templateOptions.disabled': this.fieldsDisableExpressions?.expiresOn ?? (() => false),
        },
        templateOptions: {
        label: 'Expires on',
        placeholder: 'Product expiration date, if any',
        disabled: this.isReadonly || false,
        description: '',
        hidden: !true,
        },
modelOptions: { updateOn: 'blur' },
asyncValidators: { validation: [ 'productExpiresOnIsRequired' ] },
        },
        {
        key: 'freeShipping',
        type: this.isReadonly ? 'readonly-boolean' : 'checkbox',
        className: '',
        hideExpression: this.fieldsHideExpressions?.freeShipping ?? false,
        expressionProperties: {
          'templateOptions.disabled': this.fieldsDisableExpressions?.freeShipping ?? (() => false),
        },
        templateOptions: {
        label: 'Free shipping',
        placeholder: 'Free shipping',
        disabled: this.isReadonly || false,
        description: '',
        hidden: !true,
        },
        },
        {
        key: 'hasDiscount',
        type: this.isReadonly ? 'readonly-boolean' : 'checkbox',
        className: '',
        hideExpression: this.fieldsHideExpressions?.hasDiscount ?? false,
        expressionProperties: {
          'templateOptions.disabled': this.fieldsDisableExpressions?.hasDiscount ?? (() => false),
        },
        templateOptions: {
        label: 'Has discount',
        placeholder: 'Has discount',
        disabled: this.isReadonly || false,
        description: '',
        hidden: !true,
        },
        },
        {
        key: 'discount',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.discount ?? false,
        expressionProperties: {
          'templateOptions.disabled': this.fieldsDisableExpressions?.discount ?? (() => false),
        },
        templateOptions: {
        label: 'Discount',
        placeholder: 'Discount',
        disabled: this.isReadonly || false,
        description: '',
        hidden: !true,
            type: 'number',
min: 0,
max: 100,

        },
        },
    ];
  }
}